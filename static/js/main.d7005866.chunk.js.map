{"version":3,"sources":["Components/JSRootGraph.js","Components/Form.js","Backend/WASMWrapper.js","Components/ContentWrapper.js","App.js","reportWebVitals.js","index.js"],"names":["JSROOT","Form","props","handleSubmit","bind","methodChangeHandler","state","method","this","onSubmit","event","setState","target","value","className","onChange","type","step","defaultValue","placeholder","map","particle","key","material","onClick","Component","createTGraphFromTrace","trace","createTGraph","y","length","x","createMultigraphFromProps","traces","createTMultiGraph","drawOptFromProps","res","logx","push","logy","line","join","JSRootGraph","graphRef","createRef","drawn","window","toDraw","draw","current","nextProps","nextState","cleanup","opts","console","log","then","_","style","width","height","ref","ContentWrapper","ready","submitHandler","message","Array","from","Math","random","forceUpdate","name","makeAsyncScriptLoader","globalName","onLoad","App","asyncScriptOnLoad","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7005866.chunk.js","sourcesContent":["import React,{ Component, createRef } from \"react\";\n\nlet JSROOT\n//#region Helper functions\n\nfunction createTGraphFromTrace(trace) {\n    return JSROOT.createTGraph(trace.y.length, trace.x, trace.y)\n}\n\nfunction createMultigraphFromProps(traces) {\n    return JSROOT.createTMultiGraph(...(traces.map(createTGraphFromTrace)));\n}\n\nfunction drawOptFromProps(props){\n    const res = [];\n    if(props.logx) res.push(\"logx\");\n    if(props.logy) res.push(\"logy\");\n    if(!props.line) res.push(\"P\");\n\n    return res.join(';');\n}\n\n//#endregion Helper functions\n\n// COMPONENT\n\nclass JSRootGraph extends Component {\n\n    static traces = 0;\n\n    constructor(props) {\n        super(props);   \n        this.graphRef = createRef(null);\n\n        this.state = {\n            traces: [],\n            drawn: false\n        }\n\n        JSROOT = window.JSROOT;\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        return {\n            traces: props.traces,\n            drawn: props.traces.length===JSRootGraph.traces\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.traces.length !== 0) {\n            const toDraw = createMultigraphFromProps(this.props.traces);\n            JSROOT.draw(this.graphRef.current, toDraw, drawOptFromProps(this.props))\n        }\n    }\n\n\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const should =!nextState.drawn\n        || this.props.logx !== nextProps.logx\n        || this.props.logy !== nextProps.logy\n        || this.props.line !== nextProps.line;\n\n        if (should) {\n            JSROOT.cleanup(this.graphRef.current);\n            const toDraw = createMultigraphFromProps(nextState.traces);\n            const opts = drawOptFromProps(nextProps);\n            console.log(opts);\n            JSROOT.draw(this.graphRef.current, toDraw, opts)\n                .then(_ => {\n                    JSRootGraph.traces = nextProps.traces.length;\n                    this.setState({\n                        drawn: true\n                    })\n                });\n                return true;\n        }\n        return false;\n    }\n\n    render() {\n        return (\n            <div>\n                <div style={{ width: \"100%\", height: 480 }} ref={this.graphRef}></div>\n            </div>\n\n        )\n    }\n}\n\nexport default JSRootGraph;","import React,{ Component } from 'react';\nimport { getParticles, getMaterials } from '../Backend/WASMWrapper';\n\nimport '../Styles/Form.css'\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.methodChangeHandler = this.methodChangeHandler.bind(this);\n\n        this.state = {\n            method: \"Points\"\n        }\n    }\n\n\n      handleSubmit(){\n        this.props.onSubmit(\"Hello\")\n      }\n    \n\n    methodChangeHandler(event) {\n        this.setState({\n            method: event.target.value\n        })\n    }\n\n\n    render() {\n\n        return (\n            <form className=\"particle-input\">\n                <div>\n                    <label>\n                        Generate points\n                        <select onChange={this.methodChangeHandler} className=\"input-box\">\n                            <option>Points</option>\n                            <option>Step</option>\n                        </select>\n                    </label>\n                    <label>\n                        {this.state.method === \"Points\" ? \"Number of points\" : \"Step size\"}\n                        <input className=\"input-box\" type=\"number\" step=\"0.01\" defaultValue={500} placeholder={500} />\n                    </label>\n\n                </div>\n                <div>\n                    <label>\n                        Particle\n                        <select className=\"input-box\">\n                            {getParticles().map((particle, key) => <option key={\"material_\" + key}>{particle}</option>)}\n                        </select>\n                    </label>\n                    <label>\n                        Material\n                        <select className=\"input-box\">\n                            Material\n                            {getMaterials().map((material, key) => <option key={\"material_\" + key}>{material}</option>)}\n                        </select>\n                    </label>\n\n                </div>\n                <button className=\"button\" type=\"button\" onClick={this.handleSubmit}>Submit</button>\n            </form>\n        );\n    }\n}\nexport default Form\n","const __wasm = __init_wasm()\n\n//#region TODO:\nfunction __init_wasm() { }\n//#endregion TODO\n\n//#region MOCK\n//#region GET\nexport function getTrace(particle, propagationMedium) {\n    if (__wasm) console.log(\"wasm\");\n    return {\n        x: [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],\n        y: Array.from(new Array(10),_=>Math.random()*100)\n    }\n}\n\nexport function getParticles() {\n    return ['He', 'O', 'C', 'N']\n}\n\nexport function getMaterials() {\n    return ['Water', 'Air', 'Earth', 'Fire']\n}\n//#endregion GET\n//#endregion MOCK\n\n\n","import React,{ Component } from \"react\";\nimport makeAsyncScriptLoader from \"react-async-script\";\nimport Form from \"./Form\";\nimport JSRootGraph from \"./JSRootGraph\";\n\nimport { getTrace } from '../Backend/WASMWrapper'\n\nconst JSRootLink = 'https://root.cern.ch/js/latest/scripts/JSRoot.core.js';\n\nclass ContentWrapper extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ready: false,\n            traces: [],\n            logx: false,\n            logy: true,\n            line: true\n        }\n\n        this.submitHandler = this.submitHandler.bind(this);\n    }\n\n    shouldComponentUpdate(_, nextState) {\n        return !this.props.JSROOT \n        || this.state.traces.length !== nextState.traces.length\n        || this.state.logx !== nextState.logx\n        || this.state.logy !== nextState.logy\n        || this.state.line !== nextState.line\n\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        return {\n            ready: props.JSROOT ? true : false,\n            traces: state.traces,\n            logx: state.logx,\n            logy: state.logy,\n            line: state.line,\n        };\n    }\n\n    //TODO\n    submitHandler(message) {\n        console.log(message);\n        const traces = this.state.traces;\n        traces.push(getTrace(message, \"\"));\n        this.setState({\n            traces: traces\n        })\n        this.forceUpdate();\n\n    }\n\n    render() {\n\n        console.log(\"rerender wrapper\");\n\n        return (\n            <div className=\"content gridish\">\n                <div>\n                    <Form onSubmit={this.submitHandler} />\n                    <form onChange={_=>{}} className=\"radio-container\">\n                        <div className=\"radio-group\">\n                            <div  className=\"radio-label\">X</div>\n                            <div>\n                                <label>\n                                    <input onClick={_=>this.setState({logx:false})} type=\"radio\" name=\"xAxis\" />\n                                    <span className=\"radio\">Linear</span>\n                                </label>\n                                <label>\n                                    <input onClick={_=>this.setState({logx:true})} type=\"radio\" name=\"xAxis\" />\n                                    <span className=\"radio\">Logarithmic</span>\n                                </label>\n                            </div>\n                        </div >\n                        <div className=\"radio-group\">\n                            <div className=\"radio-label\">Y</div>\n                            <div>\n                                <label>\n                                    <input onClick={_=>this.setState({logy:false})} type=\"radio\" name=\"yAxis\" />\n                                    <span className=\"radio\">Linear</span>\n\n                                </label>\n                                <label>\n                                    <input onClick={_=>this.setState({logy:true})} type=\"radio\" name=\"yAxis\" />\n                                    <span className=\"radio\">Logarithmic</span>\n                                </label>\n                            </div>\n                        </div >\n                        <div className=\"radio-group\">\n                            <div className=\"radio-label\">Plot as</div>\n                            <div>\n                                <label>\n                                    <input onClick={_=>this.setState({line:false})} type=\"radio\" name=\"plotType\" />\n                                    <span className=\"radio\">Points</span>\n                                </label>\n                                <label>\n                                    <input onClick={_=>this.setState({line:true})} type=\"radio\" name=\"plotType\" />\n                                    <span className=\"radio\">Line</span>\n                                </label>\n                            </div>\n                        </div >\n\n                    </form>\n\n                </div>\n                {\n                    this.state.ready\n                        ? <JSRootGraph traces={this.state.traces} logx={this.state.logx} logy={this.state.logy} line={this.state.line} />\n                        : <h2>JSROOT still loading</h2>\n                }\n            </div>\n        )\n    }\n}\n\n\n\n\nexport default makeAsyncScriptLoader(JSRootLink, {\n    globalName: \"JSROOT\"\n})(ContentWrapper);","import React from 'react';\nimport './App.css';\n\nimport ContentWrapper from './Components/ContentWrapper';\n\n\nconst onLoad = ()=>{\n  console.log(\"Scripd done - outside\");\n}\n\nfunction App() {\n\n  return (\n    <div>\n    <ContentWrapper asyncScriptOnLoad ={onLoad}/>\n    </div>\n  );\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}