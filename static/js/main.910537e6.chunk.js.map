{"version":3,"sources":["Components/JSRootGraph.js","Components/Toggle.js","Components/Form.js","Backend/WASMWrapper.js","Components/ContentWrapper.js","App.js","reportWebVitals.js","index.js"],"names":["JSROOT","Toggle","name","children","onChange","startValue","useState","selected","setSelected","className","map","c","k","onClick","newState","Form","props","handleSubmit","bind","state","method","this","onSubmit","setState","type","step","defaultValue","placeholder","onMethodChange","particle","key","material","Component","createTGraphFromTrace","trace","createTGraph","y","length","x","createMultigraphFromProps","traces","createTMultiGraph","drawOptFromProps","res","logx","push","logy","plotStyle","join","JSRootGraph","graphRef","createRef","drawn","window","toDraw","draw","current","nextProps","nextState","cleanup","opts","console","log","then","_","style","width","height","ref","ContentWrapper","ready","layout","submitHandler","message","Array","from","Math","random","forceUpdate","display","flexDirection","gap","padding","onXAxisStateChange","onYAxisStateChange","onPlottingMethodChange","line","makeAsyncScriptLoader","globalName","onLoad","App","asyncScriptOnLoad","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.910537e6.chunk.js","sourcesContent":["import React,{ Component, createRef } from \"react\";\n\nlet JSROOT\n//#region Helper functions\n\nfunction createTGraphFromTrace(trace) {\n    return JSROOT.createTGraph(trace.y.length, trace.x, trace.y)\n}\n\nfunction createMultigraphFromProps(traces) {\n    return JSROOT.createTMultiGraph(...(traces.map(createTGraphFromTrace)));\n}\n\nfunction drawOptFromProps(props){\n    const res : null[] = [];\n    if(props.logx === 1) res.push(\"logx\");\n    if(props.logy === 1) res.push(\"logy\");\n    if(props.plotStyle === 1) res.push(\"P\");\n\n    return res.join(';');\n}\n\n//#endregion Helper functions\n\n// COMPONENT\n\nclass JSRootGraph extends Component {\n\n    static traces = 0;\n\n    constructor(props) {\n        super(props);   \n        this.graphRef = createRef(null);\n\n        this.state = {\n            traces: [],\n            drawn: false\n        }\n\n        JSROOT = window.JSROOT;\n\n        \n    }\n\n    static getDerivedStateFromProps(props, state) {\n        return {\n            traces: props.traces,\n            drawn: props.traces.length===JSRootGraph.traces\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.traces.length !== 0) {\n            const toDraw : any = createMultigraphFromProps(this.props.traces);\n            JSROOT.draw(this.graphRef.current, toDraw, drawOptFromProps(this.props))\n        }\n        else{\n            JSROOT.draw(this.graphRef.current,JSROOT.createTGraph(1))\n        }\n    }\n\n\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const should : any =!nextState.drawn\n        || this.props.logx !== nextProps.logx\n        || this.props.logy !== nextProps.logy\n        || this.props.plotStyle !== nextProps.plotStyle;\n\n        if (should) {\n            JSROOT.cleanup(this.graphRef.current);\n            const toDraw : any = createMultigraphFromProps(nextState.traces);\n            const opts : any = drawOptFromProps(nextProps);\n            console.log(opts);\n            JSROOT.draw(this.graphRef.current, toDraw, opts)\n                .then(_ => {\n                    JSRootGraph.traces = nextProps.traces.length;\n                    this.setState({\n                        drawn: true\n                    })\n                });\n                return true;\n        }\n        return false;\n    }\n\n    render() {\n        return (\n            <div>\n                <div style={{ width: \"100%\", height: 480 }} ref={this.graphRef}></div>\n            </div>\n\n        )\n    }\n}\n\nexport default JSRootGraph;","import React, { useState } from 'react';\nimport '../Styles/Toggle.css'\n\nconst Toggle : any = ({name, children, onChange, startValue})=>{\n    const [selected, setSelected] = useState(startValue??0);\n\n    const exportChange : any = (newState) => {\n        setSelected(newState);\n        onChange(newState);\n    }\n\n    return(\n        <div className=\"toggle-body\">\n            {name && <div className=\"toggle-name\">{name}</div>}\n            <div className=\"option-container\">\n                {children.map((c,k)=>{\n                return(\n                    <div key={`toggle-${name}-${k}`} onClick={()=>exportChange(k)} className={`toggle-option${selected===k?\" selected\":\"\"}`}>{c}</div>\n                )\n            })}\n            </div>\n            \n        </div>\n    )\n}\n\nexport default Toggle;","import React,{ Component } from 'react';\nimport { getParticles, getMaterials } from '../Backend/WASMWrapper';\n\nimport '../Styles/Form.css'\nimport Toggle from './Toggle';\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n        this.state = {\n            method: 0\n        }\n    }\n\n\n    handleSubmit() {\n        this.props.onSubmit(\"Hello\")\n    }\n\n\n    onMethodChange(newState) {\n        this.setState({ method: newState })\n\n    }\n\n\n    render() {\n\n        return (\n            <form className=\"particle-input\">\n                <div>\n                    <label className=\"input-wrapper\">\n                        Name\n                        <input type=\"text\" className=\"input-box\" />\n                    </label>\n                    <div className=\"input-wrapper\">\n                        Plot using\n                        <div className=\"toggle-compound\">\n                            <input className=\"input-box\" type=\"number\" step=\"0.01\" defaultValue={500} placeholder={500} />\n                            <Toggle onChange={this.onMethodChange.bind(this)}>\n                                <>Step</>\n                                <>Points</>\n                            </Toggle>\n                        </div>\n                    </div>\n                </div>\n                <div>\n                    <label className=\"input-wrapper\">\n                        Particle\n                        <select className=\"input-box\">\n                            {getParticles().map((particle, key) => <option key={\"material_\" + key}>{particle}</option>)}\n                        </select>\n                    </label>\n                    <label className=\"input-wrapper\">\n                        Material\n                        <select className=\"input-box\">\n                            Material\n                            {getMaterials().map((material, key) => <option key={\"material_\" + key}>{material}</option>)}\n                        </select>\n                    </label>\n                </div>\n                <button className=\"button\" type=\"button\" onClick={this.handleSubmit}>Submit</button>\n            </form>\n        );\n    }\n}\nexport default Form\n","const __wasm : any = __init_wasm()\n\n//#region TODO:\nfunction __init_wasm() { }\n//#endregion TODO\n\n//#region MOCK\n//#region GET\nexport function getTrace(particle, propagationMedium) {\n    if (__wasm) console.log(\"wasm\");\n    return {\n        x: [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],\n        y: Array.from(new Array(10),_=>Math.random()*100)\n    }\n}\n\nexport function getParticles() {\n    return ['He', 'O', 'C', 'N']\n}\n\nexport function getMaterials() {\n    return ['Water', 'Air', 'Earth', 'Fire']\n}\n//#endregion GET\n//#endregion MOCK\n\n\n","import React,{ Component } from \"react\";\nimport makeAsyncScriptLoader from \"react-async-script\";\nimport Form from \"./Form\";\nimport JSRootGraph from \"./JSRootGraph\";\n\nimport { getTrace } from '../Backend/WASMWrapper'\nimport Toggle from \"./Toggle\";\n\nconst JSRootLink : string = 'https://root.cern.ch/js/latest/scripts/JSRoot.core.js';\n\n\n\n\nclass ContentWrapper extends Component {\n\n    onXAxisStateChange(newState){\n        this.setState({logx:newState})\n    }\n    \n    onYAxisStateChange(newState){\n        this.setState({logy:newState})\n    }\n    \n    onPlottingMethodChange(newState){\n        this.setState({plotStyle:newState})\n    }\n\n    onLayoutChange(newState){\n        this.setState({layout:newState})\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ready: false,\n            traces: [],\n            logx: 0,\n            logy: 1,\n            plotStyle: 0,\n            layout:0,\n        }\n\n        this.submitHandler = this.submitHandler.bind(this);\n    }\n\n    shouldComponentUpdate(_, nextState) {\n        return !this.props.JSROOT \n        || this.state.traces.length !== nextState.traces.length\n        || this.state.logx !== nextState.logx\n        || this.state.logy !== nextState.logy\n        || this.state.plotStyle !== nextState.plotStyle\n        || this.state.layout !== nextState.layout\n\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        return {\n            ready: props.JSROOT ? true : false,\n            traces: state.traces,\n            logx: state.logx,\n            logy: state.logy,\n            plotStyle: state.plotStyle,\n        };\n    }\n\n    //TODO\n    submitHandler(message) {\n        console.log(message);\n        const traces : any = this.state.traces;\n        traces.push(getTrace(message, \"\"));\n        this.setState({\n            traces: traces\n        })\n        this.forceUpdate();\n\n    }\n\n    render() {\n        return (\n            <div className=\"content gridish\">\n                <div>\n                    <Form onSubmit={this.submitHandler} layout={this.state.layout} />\n                    <div style={{display: \"flex\", flexDirection:\"row\", gap:20, padding:\"1rem 3rem\"}}>\n                    <Toggle onChange={this.onXAxisStateChange.bind(this)} name={\"X Axis:\"} startValue={this.state.logx}>\n                        <>Linear</>\n                        <>Logarithmic</>\n                    </Toggle>\n                    <Toggle onChange={this.onYAxisStateChange.bind(this)} name={\"Y Axis:\"} startValue={this.state.logy}>\n                        <>Linear</>\n                        <>Logarithmic</>\n                    </Toggle>\n                    <Toggle onChange={this.onPlottingMethodChange.bind(this)} name={\"Plotting Method:\"} startValue={this.state.line}>\n                        <>Line</>\n                        <>Points</>\n                    </Toggle>\n\n                    </div>\n                </div>\n                {\n                    this.state.ready\n                        ? <JSRootGraph traces={this.state.traces} logx={this.state.logx} logy={this.state.logy} plotStyle={this.state.plotStyle} />\n                        : <h2>JSROOT still loading</h2>\n                }\n            </div>\n        )\n    }\n}\n\n\n\n\nexport default makeAsyncScriptLoader(JSRootLink, {\n    globalName: \"JSROOT\"\n})(ContentWrapper);","import React from 'react';\nimport './App.css';\n\nimport ContentWrapper from './Components/ContentWrapper';\n\n\nconst onLoad : any = ()=>{\n  console.log(\"Scripd done - outside\");\n}\n\nfunction App() {\n\n  return (\n    <div>\n    <ContentWrapper asyncScriptOnLoad ={onLoad}/>\n    </div>\n  );\n}\n\n\n\nexport default App;\n","const reportWebVitals : any = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}